# -*- coding: utf-8 -*-
"""Clustering Implementation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XFrTrRrEREVyR6_13mG0-xTggt9hZSTg

**CLUSTERING IMPLEMENTATION**

Importig required Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler
from matplotlib import pyplot as plt
import pandas as pd
# %matplotlib inline

"""Importing dataset"""

dataset = pd.read_csv('income.csv')

"""Reading the given data and fragmenting

we can read hed data also i have read tail data
"""

df = pd.read_csv("income.csv")
df.tail()

"""visualising data"""

plt.scatter(df.Age,df['Income($)'])
plt.xlabel('Age')
plt.ylabel('Income($)')

"""we can three clusters clearly

so we use k means for this clusters
"""

km = KMeans(n_clusters=3)
y_predicted = km.fit_predict(df[['Age','Income($)']])
y_predicted

"""here we can see three data 0,1,2

Adding the clusters into data fragment and printing tail part
"""

df['cluster']=y_predicted
df.tail()

"""Locating clusters centroid"""

km.cluster_centers_

"""visualising the model by adding all the clusters in three data frames and plotting  age vs income and plotting three colours using RGB colour and plotting centroid also"""

df1 = df[df.cluster==0]
df2 = df[df.cluster==1]
df3 = df[df.cluster==2]
plt.scatter(df1.Age,df1['Income($)'],color='green')
plt.scatter(df2.Age,df2['Income($)'],color='red')
plt.scatter(df3.Age,df3['Income($)'],color='black')
plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.xlabel('Age')
plt.ylabel('Income ($)')
plt.legend()

"""here we can see two clusters are not proper so we need to scale the values

scalling the features

**Reprocessing using min max scaler**
"""

scaler = MinMaxScaler()

scaler.fit(df[['Income($)']])
df['Income($)'] = scaler.transform(df[['Income($)']])

scaler.fit(df[['Age']])
df['Age'] = scaler.transform(df[['Age']])

df.head()

"""now we can se income and age is scaled  between 0 to 1"""

plt.scatter(df.Age,df['Income($)'])

"""adding new clusters to data fragments"""

df['cluster']=y_predicted
df.tail()

"""**Visualising the data again after scallling**"""

km = KMeans(n_clusters=3)
y_predicted = km.fit_predict(df[['Age','Income($)']])
y_predicted

df1 = df[df.cluster==0]
df2 = df[df.cluster==1]
df3 = df[df.cluster==2]
plt.scatter(df1.Age,df1['Income($)'],color='green')
plt.scatter(df2.Age,df2['Income($)'],color='red')
plt.scatter(df3.Age,df3['Income($)'],color='black')
plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.xlabel('Age')
plt.ylabel('Income ($)')
plt.legend()

"""here we can see proper clusters"""

sse = []
k_rng = range(1,10)
for k in k_rng:
    km = KMeans(n_clusters=k)
    km.fit(df[['Age','Income($)']])
    sse.append(km.inertia_)

"""assigning k from 1 t 10 and calculating error"""

km.cluster_centers_

"""Plotting the error"""

plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(k_rng,sse)